generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  userId      Int          @id @default(autoincrement()) @map("userId")
  role        Boolean      @default(true) @map("role")
  email       String       @unique @map("email")
  nickname    String       @map("nickname")
  password    String       @map("password")
  createdAt   DateTime     @default(now()) @map("createdAt")
  updatedAt   DateTime     @updatedAt @map("updatedAt")
  orders      Orders[]
  points      Point[]
  Restaurants Restaurants?

  @@map("Users")
}

model Point {
  pointId   Int      @id @default(autoincrement()) @map("pointId")
  UserId    Int      @map("UserId")
  income    Int      @map("income")
  expense   Int      @map("expense")
  balance   Int      @map("balance")
  createdAt DateTime @default(now()) @map("createdAt")
  User      Users    @relation(fields: [UserId], references: [userId], onDelete: Cascade)

  @@index([UserId], map: "Point_UserId_fkey")
  @@map("Point")
}

model Restaurants {
  restaurantId  Int      @id @default(autoincrement()) @map("restaurantId")
  UserId        Int      @unique @map("UserId")
  image         String   @map("image") @db.Text
  category      Int      @map("category")
  name          String   @map("name")
  address       String   @map("address")
  introduce     String   @map("introduce") @db.Text
  businessHours String   @map("businessHours")
  phoneNumber   String   @map("phoneNumber")
  createdAt     DateTime @default(now()) @map("createdAt")
  updatedAt     DateTime @updatedAt @map("updatedAt")
  menu          Menu[]
  User          Users    @relation(fields: [UserId], references: [userId], onDelete: Cascade)

  @@map("Restaurants")
}

model Menu {
  menuId       Int         @id @default(autoincrement()) @map("menuId")
  RestaurantId Int         @map("RestaurantId")
  category     Int         @map("category")
  name         String      @map("name")
  introduce    String      @map("introduce") @db.Text
  price        Int         @map("price")
  image        String      @map("image")
  createdAt    DateTime    @default(now()) @map("createdAt")
  updatedAt    DateTime    @updatedAt @map("updatedAt")
  Restaurant   Restaurants @relation(fields: [RestaurantId], references: [restaurantId], onDelete: Cascade)
  orders       Orders[]    @relation("MenuToOrders")

  @@unique([RestaurantId, name])
  @@map("Menu")
}

model Orders {
  orderId      Int      @id @default(autoincrement()) @map("orderId")
  UserId       Int      @map("UserId")
  MenuId       Int      @map("MenuId")
  orderDetails Json     @map("orderDetails")
  totalPrice   Int      @map("totalPrice")
  isCompleted  Boolean  @map("isCompleted")
  createdAt    DateTime @default(now()) @map("createdAt")
  User         Users    @relation(fields: [UserId], references: [userId], onDelete: Cascade)
  Reviews      Reviews?
  menu         Menu[]   @relation("MenuToOrders")

  @@index([UserId], map: "Orders_UserId_fkey")
  @@map("Orders")
}

model Reviews {
  reviewId  Int      @id @default(autoincrement()) @map("reviewId")
  OrderId   Int      @unique @map("OrderId")
  star      Int      @map("star")
  review    String   @map("review") @db.Text
  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")
  Order     Orders   @relation(fields: [OrderId], references: [orderId], onDelete: Cascade)

  @@map("Reviews")
}
