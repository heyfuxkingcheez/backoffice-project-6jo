generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  userId      Int          @id @default(autoincrement()) @map("userId")
  role        Boolean      @default(true) @map("role")
  email       String       @unique @map("email")
  nickname    String       @map("nickname")
  password    String       @map("password")
  createdAt   DateTime     @default(now()) @map("createdAt")
  updatedAt   DateTime     @updatedAt @map("updatedAt")
  orders      Orders[]
  points      Point[]
  Restaurants Restaurants?

  @@map("Users")
}


  pointId Int @id @default(autoincrement()) @map("pointId") 
  UserId Int @map("UserId")
  income Int @map("income") // 입금
  expense Int @map("expense") // 출금
  balance Int @map("balance") @default(1000000)// 잔액 //기본값 1,000,000만원

  createdAt DateTime @default(now()) @map("createdAt") // 거래날짜

  User Users @relation(fields: [UserId], references: [userId], onDelete: Cascade)


  @@index([UserId], map: "Point_UserId_fkey")
  @@map("Point")
}

model Restaurants {
  restaurantId  Int      @id @default(autoincrement()) @map("restaurantId")
  UserId        Int      @unique @map("UserId")
  image         String   @map("image") @db.Text
  category      Int      @map("category")
  name          String   @map("name")
  address       String   @map("address")
  introduce     String   @map("introduce") @db.Text
  businessHours String   @map("businessHours")
  phoneNumber   String   @map("phoneNumber")
  createdAt     DateTime @default(now()) @map("createdAt")
  updatedAt     DateTime @updatedAt @map("updatedAt")
  menu          Menu[]
  User          Users    @relation(fields: [UserId], references: [userId], onDelete: Cascade)

  @@map("Restaurants")
}

model Menu {
  menuId       Int         @id @default(autoincrement()) @map("menuId")
  RestaurantId Int         @map("RestaurantId")
  category     Int         @map("category")
  name         String      @map("name")
  introduce    String      @map("introduce") @db.Text
  price        Int         @map("price")
  image        String      @map("image")
  createdAt    DateTime    @default(now()) @map("createdAt")
  updatedAt    DateTime    @updatedAt @map("updatedAt")
  Restaurant   Restaurants @relation(fields: [RestaurantId], references: [restaurantId], onDelete: Cascade)
  orders       Orders[]    @relation("MenuToOrders")

  @@unique([RestaurantId, name])
  @@map("Menu")
}


  orderId Int @id @default(autoincrement()) @map("orderId")
  UserId Int @map("UserId")
  MenuId Int @map("MenuId")
  orderDetails Json @map("orderDetails") // 주문한 음식 / 품목별 수량을 json 형태로 받음 [{메뉴이름 : 수량}, {메뉴이름 : 수량}]
  totalPrice Int @map("totalPrice") // 주문한 내역 총 가격
  isCompleted Boolean @map("isCompleted") @default(false)// 처리중 false / 배달완료 true

  createdAt DateTime @default(now()) @map("createdAt")

  menu Menu[] // 메뉴에 대해 n:m 관계
  User Users @relation(fields: [UserId], references: [userId], onDelete: Cascade) // 사용자 하나를 가질 수 있음
  Reviews Reviews? // Orders 테이블과 Reviews 테이블이 1:1 관계 (리뷰는 있을수도 없을수도 있음) 

  @@map("Orders")
}

model Reviews {
  reviewId  Int      @id @default(autoincrement()) @map("reviewId")
  OrderId   Int      @unique @map("OrderId")
  star      Int      @map("star")
  review    String   @map("review") @db.Text
  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")
  Order     Orders   @relation(fields: [OrderId], references: [orderId], onDelete: Cascade)

  @@map("Reviews")
}
